pipeline {
    agent any
    
    environment {
        DFX_NETWORK = "${params.NETWORK ?: 'local'}"
        CANISTER_CYCLES = "2000000000000"
        BUILD_TIMEOUT = "15"
        CONSENSUS_THRESHOLD = "51"
    }
    
    parameters {
        choice(
            name: 'NETWORK',
            choices: ['local', 'testnet', 'ic'],
            description: 'Target network for deployment'
        )
        choice(
            name: 'DEPLOYMENT_TYPE',
            choices: ['full', 'canister-only', 'update'],
            description: 'Type of deployment to perform'
        )
        booleanParam(
            name: 'RUN_TESTS',
            defaultValue: true,
            description: 'Run tests after deployment'
        )
        booleanParam(
            name: 'SKIP_VERIFICATION',
            defaultValue: false,
            description: 'Skip verification step'
        )
    }
    
    stages {
        stage('Preparation') {
            parallel {
                stage('Prerequisites Check') {
                    steps {
                        script {
                            sh '''
                                echo "üîç Checking prerequisites..."
                                command -v dfx || { echo "dfx not found"; exit 1; }
                                command -v node || { echo "node not found"; exit 1; }
                                command -v npm || { echo "npm not found"; exit 1; }
                                echo "‚úÖ Prerequisites check passed"
                            '''
                        }
                    }
                }
                
                stage('Environment Setup') {
                    steps {
                        script {
                            sh '''
                                echo "üõ†Ô∏è Setting up environment..."
                                npm install
                                echo "‚úÖ Dependencies installed"
                            '''
                        }
                    }
                }
                
                stage('Network Setup') {
                    when {
                        equals expected: 'local', actual: params.NETWORK
                    }
                    steps {
                        script {
                            sh '''
                                echo "üåê Setting up local network..."
                                if ! dfx ping > /dev/null 2>&1; then
                                    dfx start --background
                                    echo "‚úÖ Local IC replica started"
                                else
                                    echo "‚úÖ Local IC replica already running"
                                fi
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Build & Test') {
            parallel {
                stage('TypeScript Compilation') {
                    steps {
                        script {
                            sh '''
                                echo "üî® Compiling TypeScript..."
                                npx tsc --noEmit
                                echo "‚úÖ TypeScript compilation passed"
                            '''
                        }
                    }
                }
                
                stage('Linting') {
                    steps {
                        script {
                            sh '''
                                echo "üîç Running linting..."
                                # Add linting commands here
                                echo "‚úÖ Linting passed"
                            '''
                        }
                    }
                }
                
                stage('Unit Tests') {
                    when {
                        equals expected: true, actual: params.RUN_TESTS
                    }
                    steps {
                        script {
                            sh '''
                                echo "üß™ Running unit tests..."
                                npm test
                                echo "‚úÖ Unit tests passed"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Deployment') {
            steps {
                script {
                    def deploymentSteps = [:]
                    
                    // Core canisters deployment
                    deploymentSteps["Build Instructions Canister"] = {
                        stage('Build Instructions Canister') {
                            sh """
                                echo "üöÄ Deploying Build Instructions Canister..."
                                dfx deploy build_instructions_canister --network ${params.NETWORK} --with-cycles ${env.CANISTER_CYCLES}
                                echo "‚úÖ Build Instructions Canister deployed"
                            """
                        }
                    }
                    
                    deploymentSteps["Build Executor Canister"] = {
                        stage('Build Executor Canister') {
                            sh """
                                echo "üöÄ Deploying Build Executor Canister..."
                                dfx deploy build_executor_canister --network ${params.NETWORK} --with-cycles ${env.CANISTER_CYCLES}
                                echo "‚úÖ Build Executor Canister deployed"
                            """
                        }
                    }
                    
                    deploymentSteps["Webhook Canister"] = {
                        stage('Webhook Canister') {
                            sh """
                                echo "üöÄ Deploying Webhook Canister..."
                                dfx deploy webhook_canister --network ${params.NETWORK} --with-cycles ${env.CANISTER_CYCLES}
                                echo "‚úÖ Webhook Canister deployed"
                            """
                        }
                    }
                    
                    // Deploy core canisters in parallel
                    parallel deploymentSteps
                    
                    // Deploy verification canister after core canisters
                    sh """
                        echo "üöÄ Deploying Verification Canister..."
                        dfx deploy verification_canister --network ${params.NETWORK} --with-cycles ${env.CANISTER_CYCLES}
                        echo "‚úÖ Verification Canister deployed"
                    """
                }
            }
        }
        
        stage('Configuration') {
            steps {
                script {
                    sh '''
                        echo "‚öôÔ∏è Configuring canisters..."
                        
                        # Get canister IDs
                        INSTRUCTIONS_ID=$(dfx canister id build_instructions_canister --network ${DFX_NETWORK})
                        EXECUTOR_ID=$(dfx canister id build_executor_canister --network ${DFX_NETWORK})
                        VERIFICATION_ID=$(dfx canister id verification_canister --network ${DFX_NETWORK})
                        WEBHOOK_ID=$(dfx canister id webhook_canister --network ${DFX_NETWORK})
                        ADMIN_PRINCIPAL=$(dfx identity get-principal)
                        
                        echo "üìã Canister IDs:"
                        echo "  Instructions: $INSTRUCTIONS_ID"
                        echo "  Executor: $EXECUTOR_ID"
                        echo "  Verification: $VERIFICATION_ID"
                        echo "  Webhook: $WEBHOOK_ID"
                        echo "  Admin: $ADMIN_PRINCIPAL"
                        
                        # Configure verification canister
                        dfx canister call verification_canister update_build_instructions_canister "(principal \\"$INSTRUCTIONS_ID\\")" --network ${DFX_NETWORK}
                        dfx canister call verification_canister update_build_executor_canisters "(vec { principal \\"$EXECUTOR_ID\\" })" --network ${DFX_NETWORK}
                        dfx canister call verification_canister update_authorized_requester "(principal \\"$ADMIN_PRINCIPAL\\")" --network ${DFX_NETWORK}
                        
                        # Configure build executor
                        dfx canister call build_executor_canister updateBuildInstructionsCanister "(principal \\"$INSTRUCTIONS_ID\\")" --network ${DFX_NETWORK}
                        dfx canister call build_executor_canister updateVerificationCanister "(principal \\"$VERIFICATION_ID\\")" --network ${DFX_NETWORK}
                        
                        echo "‚úÖ Configuration completed"
                    '''
                }
            }
        }
        
        stage('Verification') {
            when {
                not { equals expected: true, actual: params.SKIP_VERIFICATION }
            }
            parallel {
                stage('Health Checks') {
                    steps {
                        script {
                            sh '''
                                echo "üè• Running health checks..."
                                
                                # Check each canister health
                                dfx canister call build_instructions_canister healthCheck --network ${DFX_NETWORK}
                                dfx canister call build_executor_canister healthCheck --network ${DFX_NETWORK}
                                dfx canister call verification_canister healthCheck --network ${DFX_NETWORK}
                                dfx canister call webhook_canister healthCheck --network ${DFX_NETWORK}
                                
                                echo "‚úÖ Health checks passed"
                            '''
                        }
                    }
                }
                
                stage('Integration Tests') {
                    when {
                        equals expected: true, actual: params.RUN_TESTS
                    }
                    steps {
                        script {
                            sh '''
                                echo "üîó Running integration tests..."
                                
                                # Test build instructions storage
                                dfx canister call build_instructions_canister addInstructions '("test-project", "v1.0.0", "echo hello world")' --network ${DFX_NETWORK}
                                
                                # Test build execution (this will fail due to authorization, which is expected)
                                dfx canister call build_executor_canister executeBuild '("test-project", "v1.0.0")' --network ${DFX_NETWORK} || true
                                
                                # Test verification request
                                dfx canister call verification_canister request_verification '("test-project", "v1.0.0", opt 300)' --network ${DFX_NETWORK}
                                
                                echo "‚úÖ Integration tests completed"
                            '''
                        }
                    }
                }
                
                stage('Performance Tests') {
                    steps {
                        script {
                            sh '''
                                echo "‚ö° Running performance tests..."
                                
                                # Test batch operations
                                dfx canister call build_instructions_canister getStatistics --network ${DFX_NETWORK}
                                dfx canister call build_executor_canister getStatistics --network ${DFX_NETWORK}
                                
                                echo "‚úÖ Performance tests completed"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Post-Deployment') {
            parallel {
                stage('Monitoring Setup') {
                    steps {
                        script {
                            sh '''
                                echo "üìä Setting up monitoring..."
                                
                                # Generate monitoring report
                                echo "=== DEPLOYMENT REPORT ===" > deployment_report.txt
                                echo "Network: ${DFX_NETWORK}" >> deployment_report.txt
                                echo "Timestamp: $(date)" >> deployment_report.txt
                                echo "Build: ${BUILD_NUMBER}" >> deployment_report.txt
                                echo "" >> deployment_report.txt
                                
                                # Add canister IDs to report
                                echo "Canister IDs:" >> deployment_report.txt
                                dfx canister id build_instructions_canister --network ${DFX_NETWORK} | sed 's/^/  Instructions: /' >> deployment_report.txt
                                dfx canister id build_executor_canister --network ${DFX_NETWORK} | sed 's/^/  Executor: /' >> deployment_report.txt
                                dfx canister id verification_canister --network ${DFX_NETWORK} | sed 's/^/  Verification: /' >> deployment_report.txt
                                dfx canister id webhook_canister --network ${DFX_NETWORK} | sed 's/^/  Webhook: /' >> deployment_report.txt
                                
                                echo "‚úÖ Monitoring setup completed"
                            '''
                        }
                    }
                }
                
                stage('Documentation Update') {
                    steps {
                        script {
                            sh '''
                                echo "üìñ Updating documentation..."
                                
                                # Update deployment documentation with current IDs
                                echo "Last deployment: $(date)" > DEPLOYMENT_STATUS.md
                                echo "Network: ${DFX_NETWORK}" >> DEPLOYMENT_STATUS.md
                                echo "Build: ${BUILD_NUMBER}" >> DEPLOYMENT_STATUS.md
                                
                                echo "‚úÖ Documentation updated"
                            '''
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh '''
                    echo "üßπ Post-deployment cleanup..."
                    
                    # Archive deployment report
                    if [ -f deployment_report.txt ]; then
                        echo "üì¶ Archiving deployment report"
                    fi
                    
                    # Clean up temporary files
                    rm -f /tmp/ic_build_* 2>/dev/null || true
                    
                    echo "‚úÖ Cleanup completed"
                '''
            }
        }
        
        success {
            script {
                sh '''
                    echo "üéâ Deployment successful!"
                    echo "================================"
                    echo "DCanary CI/CD Pipeline deployed successfully"
                    echo "Network: ${DFX_NETWORK}"
                    echo "Build: ${BUILD_NUMBER}"
                    echo "================================"
                '''
            }
        }
        
        failure {
            script {
                sh '''
                    echo "‚ùå Deployment failed!"
                    echo "Check logs for details"
                    echo "Network: ${DFX_NETWORK}"
                    echo "Build: ${BUILD_NUMBER}"
                '''
            }
        }
        
        unstable {
            script {
                sh '''
                    echo "‚ö†Ô∏è Deployment completed with warnings"
                    echo "Review test results"
                '''
            }
        }
    }
}
